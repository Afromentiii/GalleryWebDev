doctype html
html(lang="pl")
  head
    title Rejestracja | System
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1")
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css")
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css")
    link(rel="stylesheet", href="/stylesheets/register.css")
    style.
      .is-invalid {
        border-color: #dc3545 !important;
      }
      .invalid-feedback {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
      }

  body
    .auth-card
      .auth-header
        i.fas.fa-user-plus.fa-2x.mb-2
        h2.auth-title Rejestracja
        p.text-muted Wprowadź dane do rejestracji

      if success
        .alert.alert-success.mb-3= success

      if errors && errors.general
        .alert.alert-danger.mb-3= errors.general

      form#registerForm(action="/register" method="POST")
        .mb-3
          label(for="username" class="form-label") Imię:
          input(type="text" name="username" id="username" required class=`form-control${errors && errors.username ? ' is-invalid' : ''}` placeholder="Twoje imię" value=formData.username)
          .invalid-feedback#usernameError= errors ? errors.username : ''

        .mb-3
          label(for="email" class="form-label") Email:
          input(type="email" name="email" id="email" required class=`form-control${errors && errors.email ? ' is-invalid' : ''}` placeholder="Twój email" value=formData.email)
          .invalid-feedback#emailError= errors ? errors.email : ''

        .mb-3
          label(for="password" class="form-label") Hasło:
          input(type="password" name="password" id="password" required class=`form-control${errors && errors.password ? ' is-invalid' : ''}` placeholder="Hasło")
          .invalid-feedback#passwordError= errors ? errors.password : ''

        .mb-3
          label(for="confirmPassword" class="form-label") Potwierdź hasło:
          input(type="password" name="confirmPassword" id="confirmPassword" required class=`form-control${errors && errors.confirmPassword ? ' is-invalid' : ''}` placeholder="Powtórz hasło")
          .invalid-feedback#confirmPasswordError= errors ? errors.confirmPassword : ''

        button(type="submit" class="btn btn-auth w-100 mt-2")
          i.fas.fa-user-check.me-2
          | Zarejestruj się

      .auth-footer.mt-3.text-center
        | Masz już konto?
        a(href="/login" class="text-decoration-none ms-1") Zaloguj się

    script.
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('registerForm');
        
        form.addEventListener('input', function(e) {
          validateField(e.target);
        });

        form.addEventListener('submit', function(e) {
          if (!validateForm()) {
            e.preventDefault();
          }
        });

        function validateField(field) {
          const value = field.value.trim();
          const errorElement = document.getElementById(field.name + 'Error');
          
          field.classList.remove('is-invalid');
          errorElement.textContent = '';

          switch(field.name) {
            case 'username':
              if (!value) {
                showError(field, errorElement, 'Pole Imię jest wymagane.');
              } else if (value.length < 3) {
                showError(field, errorElement, 'Imię musi mieć co najmniej 3 znaki.');
              }
              break;
            
            case 'email':
              if (!value) {
                showError(field, errorElement, 'Pole Email jest wymagane.');
              } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
                showError(field, errorElement, 'Proszę podać poprawny adres email.');
              }
              break;
            
            case 'password':
              if (!value) {
                showError(field, errorElement, 'Pole Hasło jest wymagane.');
              } else if (value.length < 6) {
                showError(field, errorElement, 'Hasło musi mieć co najmniej 6 znaków.');
              } else {
                const confirmPassword = document.getElementById('confirmPassword');
                if (confirmPassword.value) {
                  validateField(confirmPassword);
                }
              }
              break;
            
            case 'confirmPassword':
              const password = document.getElementById('password').value;
              if (!value) {
                showError(field, errorElement, 'Pole Potwierdź hasło jest wymagane.');
              } else if (value !== password) {
                showError(field, errorElement, 'Hasła nie są takie same.');
              }
              break;
          }
        }

        function validateForm() {
          let isValid = true;
          const fields = ['username', 'email', 'password', 'confirmPassword'];
          
          fields.forEach(fieldName => {
            const field = document.getElementById(fieldName);
            const errorElement = document.getElementById(fieldName + 'Error');
            
            field.classList.remove('is-invalid');
            errorElement.textContent = '';
            
            validateField(field);
            
            if (errorElement.textContent) {
              isValid = false;
            }
          });
          
          return isValid;
        }

        function showError(field, errorElement, message) {
          field.classList.add('is-invalid');
          errorElement.textContent = message;
        }
      });